package com.example.greendaotest.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaotest.db.bean.ErrorMo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ERROR_MO".
*/
public class ErrorMoDao extends AbstractDao<ErrorMo, Long> {

    public static final String TABLENAME = "ERROR_MO";

    /**
     * Properties of entity ErrorMo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property NewErrorFlag = new Property(1, boolean.class, "newErrorFlag", false, "NEW_ERROR_FLAG");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property ErrorInfo = new Property(3, String.class, "errorInfo", false, "ERROR_INFO");
        public final static Property Fixed = new Property(4, boolean.class, "fixed", false, "FIXED");
        public final static Property ErrorType = new Property(5, int.class, "errorType", false, "ERROR_TYPE");
    }


    public ErrorMoDao(DaoConfig config) {
        super(config);
    }
    
    public ErrorMoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ERROR_MO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NEW_ERROR_FLAG\" INTEGER NOT NULL ," + // 1: newErrorFlag
                "\"TIME\" TEXT," + // 2: time
                "\"ERROR_INFO\" TEXT," + // 3: errorInfo
                "\"FIXED\" INTEGER NOT NULL ," + // 4: fixed
                "\"ERROR_TYPE\" INTEGER NOT NULL );"); // 5: errorType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ERROR_MO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ErrorMo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNewErrorFlag() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String errorInfo = entity.getErrorInfo();
        if (errorInfo != null) {
            stmt.bindString(4, errorInfo);
        }
        stmt.bindLong(5, entity.getFixed() ? 1L: 0L);
        stmt.bindLong(6, entity.getErrorType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ErrorMo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNewErrorFlag() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String errorInfo = entity.getErrorInfo();
        if (errorInfo != null) {
            stmt.bindString(4, errorInfo);
        }
        stmt.bindLong(5, entity.getFixed() ? 1L: 0L);
        stmt.bindLong(6, entity.getErrorType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ErrorMo readEntity(Cursor cursor, int offset) {
        ErrorMo entity = new ErrorMo( //
            cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // newErrorFlag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // errorInfo
            cursor.getShort(offset + 4) != 0, // fixed
            cursor.getInt(offset + 5) // errorType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ErrorMo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNewErrorFlag(cursor.getShort(offset + 1) != 0);
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setErrorInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFixed(cursor.getShort(offset + 4) != 0);
        entity.setErrorType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ErrorMo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ErrorMo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ErrorMo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
